import json
import array
import sys
import time
import os
import base64
from socket import socket, AF_UNIX, SOCK_DGRAM


try:
    import requests
    from requests.auth import HTTPBasicAuth
except Exception as e:
    print("No module 'requests' found. Install: pip install requests")
    sys.exit(1)

# ossec.conf configuration:
#  <integration>
#      <name>virustotal</name>
#      <api_key>api_key_here</api_key>
#      <group>syscheck</group>
#      <alert_format>json</alert_format>
#  </integration>

# Global vars

debug_enabled = False
pwd = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))
json_alert = {}
now = time.strftime("%a %b %d %H:%M:%S %Z %Y")

# Set paths
log_file = '{0}/logs/integrations.log'.format(pwd)
socket_addr = '{0}/queue/ossec/queue'.format(pwd)

def main(args):
    debug("# Starting")
    print("start")
    # Read args
    alert_file_location = args[1]
    apikey = args[2]

    debug("# API Key")
    debug(apikey)

    debug("# File location")
    debug(alert_file_location)

    # Load alert. Parse JSON object.
    #with open(alert_file_location) as alert_file:
    #json_alert = json.load(alert_file)
    #debug("# Processing alert")
    #debug(json_alert)

    # Request VirusTotal info
    msg = request_virustotal_info()
    print("Debug msg wazuh")
    print(msg)
    # If positive match, send event to Wazuh Manager
    #msg1 = msg['bitdefender']['nomevirus'][0]
    #if msg:
    #send_event(msg)

def debug(msg):
    if debug_enabled:
        msg = "{0}: {1}\n".format(now, msg)

        print(msg1)

        f = open(log_file,"a")
        f.write(msg)
        f.close()

def collect(data):
  path = []
  virus = []
  endpoint = []
  r = 0
  for i in data['result']['items']:
     path.insert(r,(data['result']['items'][r]['details']['filePath']))
     virus.insert(r,(data['result']['items'][r]['threatName']))
     endpoint.insert(r,(data['result']['items'][r]['endpointName']))
     r=r+1

  #path  = data['result']['items'][0]['details']['filePath']
  #virus = data['result']['items'][0]['threatName']
  #permalink = data['permalink']
  #positives = data['positives']
  #total = data['total']

  return path, virus, endpoint

def in_database(data, hash):
  result = data['response_code']
  if result == 0:
    return False
  return True

def query_api():
  apikey = 'insert your API key'
  auth = base64.b64encode((apikey + ":").encode("UTF-8")).decode("UTF-8")
  authorizationHeader = "Basic " + auth

  json = {
     "method": "getQuarantineItemsList",
     "id": "insert your Company ID",
     "jsonrpc": "2.0",
     "params": {

             }
        }
  headers = {
     "Content-Type": "application/json",
     "Authorization" : authorizationHeader
    }
  response = requests.post("https://cloudgz.gravityzone.bitdefender.com/api/v1.0                                                                                                                                                             /jsonrpc/quarantine/computers", json=json, verify=False, headers=headers)

  if response.status_code == 200:
      json_response = response.json()
      data = json_response
      return data
  else:
      alert_output = {}
      alert_output["bitdefender"] = {}
      alert_output["integration"] = "bitdefender"


def request_virustotal_info():
    alert_output = {}

    # If there is no a md5 checksum present in the alert. Exit.
    #if not "md5_after" in alert["syscheck"]:
    #return(0)

    # Request info using VirusTotal API
    data = query_api()

    # Create alert
    alert_output["bitdefender"] = {}
    alert_output["integration"] = "bitdefender"
    #alert_output["bitdefender"]["found"] = 0
    #alert_output["virustotal"]["malicious"] = 0
    alert_output["bitdefender"]["source"] = {}
    alert_output["bitdefender"]["path"] = {}
    alert_output["bitdefender"]["virus"] = {}
    alert_output["bitdefender"]["endpoint"] = {}
    #alert_output["virustotal"]["source"]["md5"] = alert["syscheck"]["md5_after"                                                                                                                                                             ]
    #alert_output["virustotal"]["source"]["sha1"] = alert["syscheck"]["sha1_afte                                                                                                                                                             r"]

    # Check if VirusTotal has any info about the hash
    #if in_database(data, hash):
    #alert_output["virustotal"]["found"] = 1

    # Info about the file found in VirusTotal
    #if alert_output["virustotal"]["found"] == 1:
    path, virus, endpoint = collect(data)
    print("igor debug")
    #print(path, nomevirus)
    #if positives > 0:
    #alert_output["virustotal"]["malicious"] = 1

    # Populate JSON Output object with VirusTotal request
    j=0
    for i in path:
      alert_output["bitdefender"]["path"] = path[j]
      send_event(alert_output)
      j=j+1

    f=0
    for i in virus:
      alert_output["bitdefender"]["virus"] = virus[f]
      send_event(alert_output)
      f=f+1
    k=0
    for i in virus:
      alert_output["bitdefender"]["endpoint"] = endpoint[k]
      send_event(alert_output)
      k=k+1

    #alert_output["virustotal"]["positives"] = positives
    #alert_output["virustotal"]["total"] = total
    #alert_output["virustotal"]["permalink"] = permalink


    debug(alert_output)

    return(alert_output)

def send_event(msg, agent = None):
    if not agent or agent["id"] == "000":
        string = '1:bitdefender:{0}'.format(json.dumps(msg))
    else:
        string = '1:[{0}] ({1}) {2}->bitdefender:{3}'.format(agent["id"], agent[                                                                                                                                                             "name"], agent["ip"] if "ip" in agent else "any", json.dumps(msg))

    debug(string)
    sock = socket(AF_UNIX, SOCK_DGRAM)
    sock.connect(socket_addr)
    sock.send(string.encode())
    sock.close()

if __name__ == "__main__":
    try:
        # Read arguments
        bad_arguments = False
        if len(sys.argv) >= 4:
            msg = '{0} {1} {2} {3} {4}'.format(now, sys.argv[1], sys.argv[2], sy                                                                                                                                                             s.argv[3], sys.argv[4] if len(sys.argv) > 4 else '')
            debug_enabled = (len(sys.argv) > 4 and sys.argv[4] == 'debug')
        else:
            msg = '{0} Wrong arguments'.format(now)
            bad_arguments = True

        # Logging the call
        f = open(log_file, 'a')
        f.write(msg +'\n')
        f.close()

        if bad_arguments:
            debug("# Exiting: Bad arguments.")
            sys.exit(1)

        # Main function
        main(sys.argv)

    except Exception as e:
        debug(str(e))
        raise
